import React, { useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import API from "../Backend/api";
import qs from "qs"; // Make sure to install this: npm install qs

const translations = {
  hindi: { title: "‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç", productName: "‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡§æ ‡§®‡§æ‡§Æ", description: "‡§µ‡§ø‡§µ‡§∞‡§£", city: "‡§∂‡§π‡§∞", state: "‡§∞‡§æ‡§ú‡•ç‡§Ø", quantity_available: "‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß", price: "‡§ï‡•Ä‡§Æ‡§§", imageUrl: "‡§õ‡§µ‡§ø URL", submit: "‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç", goBack: "‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç" },
  english: { title: "Add Product", productName: "Product Name", description: "Description", city: "City", state: "State", quantity_available: "Quantity Available", price: "Price", imageUrl: "Image URL", submit: "Submit", goBack: "Go Back" },
  punjabi: { title: "‡®â‡®§‡®™‡®æ‡®¶ ‡®∏‡®º‡®æ‡®Æ‡®≤ ‡®ï‡®∞‡©ã", productName: "‡®â‡®§‡®™‡®æ‡®¶ ‡®¶‡®æ ‡®®‡®æ‡®Ç", description: "‡®µ‡®∞‡®£‡®®", city: "‡®∏‡®º‡®π‡®ø‡®∞", state: "‡®∞‡®æ‡®ú", quantity_available: "‡®Æ‡®æ‡®§‡®∞‡®æ", price: "‡®ï‡©Ä‡®Æ‡®§", imageUrl: "‡®ö‡®ø‡©±‡®§‡®∞ URL", submit: "‡®ú‡®Æ‡©ç‡®π‡®æ‡®Ç ‡®ï‡®∞‡©ã", goBack: "‡®µ‡®æ‡®™‡®∏ ‡®ú‡®æ‡®ì" },
  malayalam: { title: "‡¥â‡µΩ‡¥™‡µç‡¥™‡¥®‡µç‡¥®‡¥Ç ‡¥ö‡µá‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥ï", productName: "‡¥â‡µΩ‡¥™‡µç‡¥™‡¥®‡µç‡¥®‡¥§‡µç‡¥§‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥™‡µá‡¥∞‡µç", description: "‡¥µ‡¥ø‡¥µ‡¥∞‡¥£‡¥Ç", city: "‡¥®‡¥ó‡¥∞‡¥Ç", state: "‡¥∏‡¥Ç‡¥∏‡µç‡¥•‡¥æ‡¥®‡¥Ç", quantity_available: "‡¥Ö‡¥≥‡¥µ‡µç ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥æ‡¥£‡µç", price: "‡¥µ‡¥ø‡¥≤", imageUrl: "‡¥ö‡¥ø‡¥§‡µç‡¥∞ URL", submit: "‡¥∏‡¥Æ‡µº‡¥™‡µç‡¥™‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï", goBack: "‡¥§‡¥ø‡¥∞‡¥ø‡¥ï‡µÜ ‡¥™‡µã‡¥ï‡µÅ‡¥ï" },
  telugu: { title: "‡∞â‡∞§‡±ç‡∞™‡∞§‡±ç‡∞§‡∞ø ‡∞ú‡±ã‡∞°‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø", productName: "‡∞â‡∞§‡±ç‡∞™‡∞§‡±ç‡∞§‡∞ø ‡∞™‡±á‡∞∞‡±Å", description: "‡∞µ‡∞ø‡∞µ‡∞∞‡∞£", city: "‡∞®‡∞ó‡∞∞‡∞Ç", state: "‡∞∞‡∞æ‡∞∑‡±ç‡∞ü‡±ç‡∞∞‡∞Ç", quantity_available: "‡∞™‡±ç‡∞∞‡∞æ‡∞Æ‡∞æ‡∞£‡∞ø‡∞ï ‡∞™‡∞∞‡∞ø‡∞Æ‡∞æ‡∞£‡∞Ç", price: "‡∞ß‡∞∞", imageUrl: "‡∞ö‡∞ø‡∞§‡±ç‡∞∞ URL", submit: "‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø", goBack: "‡∞µ‡±Ü‡∞®‡∞ï‡±ç‡∞ï‡∞ø ‡∞µ‡±Ü‡∞≥‡±ç‡∞≤‡∞Ç‡∞°‡∞ø" },
  marathi: { title: "‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§ú‡•ã‡§°‡§æ", productName: "‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§æ‡§ö‡•á ‡§®‡§æ‡§µ", description: "‡§µ‡§∞‡•ç‡§£‡§®", city: "‡§∂‡§π‡§∞", state: "‡§∞‡§æ‡§ú‡•ç‡§Ø", quantity_available: "‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß", price: "‡§ï‡§ø‡§Ç‡§Æ‡§§", imageUrl: "‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡§æ URL", submit: "‡§∏‡§æ‡§¶‡§∞ ‡§ï‡§∞‡§æ", goBack: "‡§Æ‡§æ‡§ó‡•á ‡§ú‡§æ" },
};

const AddProduct = () => {
  const { language } = useParams();
const navigate = useNavigate();
const texts = translations[language] || translations.english;

const rawFarmerId = localStorage.getItem("userId");
const farmerId = rawFarmerId && !isNaN(rawFarmerId) ? parseInt(rawFarmerId, 10) : null;


// ‚úÖ Then define `formData`
const [formData, setFormData] = useState({
  farmer_id: farmerId, // Correctly initialized
  name: "",
  description: "",
  city: "",
  state: "",
  quantity_available: "",
  price: "",
});

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const validateForm = () => {
    let newErrors = {};
    if (!formData.name) newErrors.name = `${texts.productName} is required`;
    if (!formData.description) newErrors.description = `${texts.description} is required`;
    if (!formData.city) newErrors.city = `${texts.city} is required`;
    if (!formData.state) newErrors.state = `${texts.state} is required`;
    if (!formData.quantity_available) newErrors.quantity_available = `${texts.quantity_available} is required`;
    if (!formData.price) newErrors.price = `${texts.price} is required`;
     if (!formData.farmer_id || isNaN(formData.farmer_id)) newErrors.farmer_id = `${texts.farmerId} is required or invalid`;  // Add farmer_id validation
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

const getImageForProduct = (productName) => {
  const lowerName = productName.toLowerCase();
  if (lowerName.includes("wheat") || lowerName.includes("gehu")) {
    return "gehu.png";
  }
  return "default.png"; // Fallback image
};

const handleSubmit = async (e) => {
  e.preventDefault();
  console.log("Submitting form...");

  if (validateForm()) {
    console.log("Form validation passed!");

    try {
      const formattedData = {
        ...formData,
        image_url: getImageForProduct(formData.name), // ‚úÖ Auto-assign image
        farmer_id: formData.farmer_id ? parseInt(formData.farmer_id, 10) : "", // ‚úÖ Ensure proper numeric format
        quantity_available: formData.quantity_available ? parseInt(formData.quantity_available.replace(/,/g, ""), 10) : "", 
        price: formData.price ? parseFloat(formData.price.replace(/[^\d.]/g, "")) : "",
      };

      console.log("Final formatted data (before encoding):", formattedData); // Debugging

      const encodedData = qs.stringify(formattedData); // ‚úÖ Convert to URL-encoded format
      console.log("Encoded Data:", encodedData); // ‚úÖ Log encoded request

      const response = await API.post(
        "/products/add",
        encodedData, // ‚úÖ Send URL-encoded data
        { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } } // ‚úÖ Ensure proper encoding
      );

      console.log("API response:", response); // ‚úÖ Log response
      alert(response.data.message);
      navigate(`/farmer/addproduct/${language}`);
    } catch (error) {
      console.error("API request failed ‚ùå:", error); // ‚úÖ Debug API error
      alert("Failed to add product ‚ùå");
    }
  }
};

  return (
    <div style={{ height: "100vh", fontFamily: "Arial, sans-serif", backgroundImage:`url(${process.env.PUBLIC_URL}/home1.jpg)`, backgroundSize: "cover", backgroundPosition: "center", color: "white" }}>
      
      {/* Navbar */}
      <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", background: "#28a745", padding: "10px 20px", color: "white" }}>
        <div style={{ fontSize: "1.5rem", fontWeight: "bold" }}>Krishi Agro</div>
        <div style={{ fontSize: "1.2rem" }}>{texts.title}</div>
        <button style={{ background: "none", border: "none", color: "white", fontSize: "1rem", cursor: "pointer" }} onClick={() => navigate(`/farmer/successloged/${language}`)}>{texts.goBack}</button>
      </div>

      {/* Main Layout */}
      <div style={{ display: "flex", height: "calc(100vh - 50px)" }}>
        
        {/* Sidebar */}
        <div style={{ width: "120px", background: "#333", color: "white", padding: "10px", display: "flex", flexDirection: "column", alignItems: "center" }}>
          <div style={{ fontSize: "1.2rem", marginBottom: "10px" }}>üë§</div>
          <button style={{ background: "none", border: "none", color: "white", fontSize: "0.8rem", cursor: "pointer" }}>My Profile</button>
        </div>

        {/* Form Section */}
        <div style={{ flex: 1, display: "flex", alignItems: "center", justifyContent: "center" }}>
          <form style={{ background: "white", color: "black", padding: "20px", borderRadius: "10px", boxShadow: "0 4px 8px rgba(0, 0, 0, 0.2)", minWidth: "400px", maxHeight: "80vh", overflowY: "auto" }} onSubmit={handleSubmit}>
            <h2>{texts.title}</h2>

           {Object.keys(formData).map((key) => (
              key !== "farmer_id" && ( // ‚úÖ Skip farmer_id in the form display
                <div key={key}>
                  <label htmlFor={key}>{key === "name" ? texts.productName : texts[key]}:</label>
                  <input id={key} type="text" name={key} value={formData[key]} onChange={handleChange} style={{ width: "100%", marginBottom: "10px", padding: "5px" }} />
                  {errors[key] && <span style={{ color: "red", fontSize: "12px" }}>{errors[key]}</span>}
                </div>
              )
            ))}

            <button type="submit" style={{ background: "#28a745", color: "white", padding: "10px", borderRadius: "5px", cursor: "pointer", width: "100%" }}>{texts.submit}</button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default AddProduct;